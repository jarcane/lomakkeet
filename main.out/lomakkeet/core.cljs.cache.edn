;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{update}, :name lomakkeet.core, :imports nil, :requires {s schema.core, schema.core schema.core, sc schema.coerce, schema.coerce schema.coerce, su schema.utils, schema.utils schema.utils, st schema-tools.core, schema-tools.core schema-tools.core, lomakkeet.util lomakkeet.util}, :uses {dissoc-in lomakkeet.util}, :defs {errors? {:protocol-inline nil, :meta {:file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/rcesf6/lomakkeet/core.cljs", :line 125, :column 7, :end-line 125, :end-column 14, :arglists (quote ([fs])), :doc "Check if form has any errors."}, :name lomakkeet.core/errors?, :variadic false, :file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/rcesf6/lomakkeet/core.cljs", :end-column 14, :method-params ([fs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 125, :end-line 125, :max-fixed-arity 1, :fn-var true, :arglists (quote ([fs])), :doc "Check if form has any errors."}, default-explain-error {:protocol-inline nil, :meta {:file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/rcesf6/lomakkeet/core.cljs", :line 17, :column 7, :end-line 17, :end-column 28, :arglists (quote ([error])), :doc "Should convert error from e.g. predicate to single word.\n\n   (not (required \"\")) => \"required\""}, :name lomakkeet.core/default-explain-error, :variadic false, :file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/rcesf6/lomakkeet/core.cljs", :end-column 28, :method-params ([error]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 1, :fn-var true, :arglists (quote ([error])), :doc "Should convert error from e.g. predicate to single word.\n\n   (not (required \"\")) => \"required\""}, change-value {:protocol-inline nil, :meta {:file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/rcesf6/lomakkeet/core.cljs", :line 97, :column 7, :end-line 97, :end-column 19, :arglists (quote ([fs ks value] [fs ks value {:keys [validation-fn coercion-matcher], :or {coercion-matcher sc/string-coercion-matcher}}])), :doc "Takes fs, schema, vector of keywords and new value.\n\n   If new value is nil, schema is checked if value is in optional-key,\n   value it is, instead of setting value to nil, the key is dissoced.", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([fs ks value] [fs ks value {:keys [validation-fn coercion-matcher], :or {coercion-matcher sc/string-coercion-matcher}}]), :arglists ([fs ks value] [fs ks value {:keys [validation-fn coercion-matcher], :or {coercion-matcher sc/string-coercion-matcher}}]), :arglists-meta (nil nil)}}, :name lomakkeet.core/change-value, :variadic false, :file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/rcesf6/lomakkeet/core.cljs", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([fs ks value] [fs ks value {:keys [validation-fn coercion-matcher], :or {coercion-matcher sc/string-coercion-matcher}}]), :arglists ([fs ks value] [fs ks value {:keys [validation-fn coercion-matcher], :or {coercion-matcher sc/string-coercion-matcher}}]), :arglists-meta (nil nil)}, :method-params ([fs ks value] [fs ks value {:keys [validation-fn coercion-matcher], :or {coercion-matcher sc/string-coercion-matcher}}]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 97, :end-line 97, :max-fixed-arity 4, :fn-var true, :arglists ([fs ks value] [fs ks value {:keys [validation-fn coercion-matcher], :or {coercion-matcher sc/string-coercion-matcher}}]), :doc "Takes fs, schema, vector of keywords and new value.\n\n   If new value is nil, schema is checked if value is in optional-key,\n   value it is, instead of setting value to nil, the key is dissoced."}, validate {:protocol-inline nil, :meta {:file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/rcesf6/lomakkeet/core.cljs", :line 63, :column 7, :end-line 63, :end-column 15, :arglists (quote ([fs]))}, :name lomakkeet.core/validate, :variadic false, :file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/rcesf6/lomakkeet/core.cljs", :end-column 15, :method-params ([fs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 63, :end-line 63, :max-fixed-arity 1, :fn-var true, :arglists (quote ([fs]))}, reset {:protocol-inline nil, :meta {:file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/rcesf6/lomakkeet/core.cljs", :line 53, :column 7, :end-line 53, :end-column 12, :arglists (quote ([fs])), :doc "Reset the value of form to initial value."}, :name lomakkeet.core/reset, :variadic false, :file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/rcesf6/lomakkeet/core.cljs", :end-column 12, :method-params ([fs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 53, :end-line 53, :max-fixed-arity 1, :fn-var true, :arglists (quote ([fs])), :doc "Reset the value of form to initial value."}, value {:protocol-inline nil, :meta {:file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/rcesf6/lomakkeet/core.cljs", :line 46, :column 7, :end-line 46, :end-column 12, :arglists (quote ([fs & kws])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(fs kws)], :arglists ([fs & kws]), :arglists-meta (nil)}}, :name lomakkeet.core/value, :variadic true, :file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/rcesf6/lomakkeet/core.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(fs kws)], :arglists ([fs & kws]), :arglists-meta (nil)}, :method-params [(fs kws)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 1, :fn-var true, :arglists ([fs & kws])}, dirty? {:protocol-inline nil, :meta {:file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/rcesf6/lomakkeet/core.cljs", :line 120, :column 7, :end-line 120, :end-column 13, :arglists (quote ([fs])), :doc "Check if form-state is dirty, meaning that the value and the initial value are not identitcal."}, :name lomakkeet.core/dirty?, :variadic false, :file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/rcesf6/lomakkeet/core.cljs", :end-column 13, :method-params ([fs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 120, :end-line 120, :max-fixed-arity 1, :fn-var true, :arglists (quote ([fs])), :doc "Check if form-state is dirty, meaning that the value and the initial value are not identitcal."}, FormState {:name lomakkeet.core/FormState, :file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/rcesf6/lomakkeet/core.cljs", :line 29, :column 1, :end-line 29, :end-column 23, :meta {:file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/rcesf6/lomakkeet/core.cljs", :line 29, :column 14, :end-line 29, :end-column 23}, :doc ""}, update {:protocol-inline nil, :meta {:file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/rcesf6/lomakkeet/core.cljs", :line 73, :column 7, :end-line 73, :end-column 13, :arglists (quote ([fs f & args])), :doc "Use a function to set a new value to form. This changes both the value and the initial value.\n   The function is called with the value as the first parameter and rest of arguemtns\n   are passed to the function (Like update-in).", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(fs f args)], :arglists ([fs f & args]), :arglists-meta (nil)}}, :name lomakkeet.core/update, :variadic true, :file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/rcesf6/lomakkeet/core.cljs", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(fs f args)], :arglists ([fs f & args]), :arglists-meta (nil)}, :method-params [(fs f args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 73, :end-line 73, :max-fixed-arity 2, :fn-var true, :arglists ([fs f & args]), :doc "Use a function to set a new value to form. This changes both the value and the initial value.\n   The function is called with the value as the first parameter and rest of arguemtns\n   are passed to the function (Like update-in)."}, save {:protocol-inline nil, :meta {:file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/rcesf6/lomakkeet/core.cljs", :line 67, :column 7, :end-line 67, :end-column 11, :arglists (quote ([fs value])), :doc "Set a new value to form. This will trigger a schema validation for the value.\n   Doesn't trigger commit."}, :name lomakkeet.core/save, :variadic false, :file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/rcesf6/lomakkeet/core.cljs", :end-column 11, :method-params ([fs value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 67, :end-line 67, :max-fixed-arity 2, :fn-var true, :arglists (quote ([fs value])), :doc "Set a new value to form. This will trigger a schema validation for the value.\n   Doesn't trigger commit."}, extra-validation {:protocol-inline nil, :meta {:file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/rcesf6/lomakkeet/core.cljs", :line 92, :column 7, :end-line 92, :end-column 23, :arglists (quote ([fs validation-fn]))}, :name lomakkeet.core/extra-validation, :variadic false, :file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/rcesf6/lomakkeet/core.cljs", :end-column 23, :method-params ([fs validation-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 92, :end-line 92, :max-fixed-arity 2, :fn-var true, :arglists (quote ([fs validation-fn]))}, commit {:protocol-inline nil, :meta {:file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/rcesf6/lomakkeet/core.cljs", :line 58, :column 7, :end-line 58, :end-column 13, :arglists (quote ([fs])), :doc "Commit the changes in value to the initial-value of the form."}, :name lomakkeet.core/commit, :variadic false, :file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/rcesf6/lomakkeet/core.cljs", :end-column 13, :method-params ([fs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 58, :end-line 58, :max-fixed-arity 1, :fn-var true, :arglists (quote ([fs])), :doc "Commit the changes in value to the initial-value of the form."}, validation-error->str {:protocol-inline nil, :meta {:file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/rcesf6/lomakkeet/core.cljs", :line 13, :column 7, :end-line 13, :end-column 28, :arglists (quote ([v]))}, :name lomakkeet.core/validation-error->str, :variadic false, :file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/rcesf6/lomakkeet/core.cljs", :end-column 28, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v]))}, coerce {:protocol-inline nil, :meta {:file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/rcesf6/lomakkeet/core.cljs", :line 82, :column 7, :end-line 82, :end-column 13, :arglists (quote ([schema value coercion-matcher])), :doc "Return either coerced or the original value if the coercion failed."}, :name lomakkeet.core/coerce, :variadic false, :file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/rcesf6/lomakkeet/core.cljs", :end-column 13, :method-params ([schema value coercion-matcher]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 82, :end-line 82, :max-fixed-arity 3, :fn-var true, :arglists (quote ([schema value coercion-matcher])), :doc "Return either coerced or the original value if the coercion failed."}, ->fs {:protocol-inline nil, :meta {:file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/rcesf6/lomakkeet/core.cljs", :line 37, :column 7, :end-line 37, :end-column 11, :arglists (quote ([value] [value schema])), :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([value] [value schema]), :arglists ([value] [value schema]), :arglists-meta (nil nil)}}, :name lomakkeet.core/->fs, :variadic false, :file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/rcesf6/lomakkeet/core.cljs", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([value] [value schema]), :arglists ([value] [value schema]), :arglists-meta (nil nil)}, :method-params ([value] [value schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 2, :fn-var true, :arglists ([value] [value schema])}}, :require-macros {s schema.core, schema.core schema.core, su schema.utils, schema.utils schema.utils}, :cljs.analyzer/constants {:seen #{:schema :errors :validation-fn :ns :value :not-pristine FormState :coercion-matcher :initial-value lomakkeet.core}, :order [:value :initial-value :errors :not-pristine :schema FormState :ns lomakkeet.core :validation-fn :coercion-matcher]}, :doc nil}