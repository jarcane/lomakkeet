;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{dissoc assoc-in select-keys update update-in merge assoc get-in}, :name schema-tools.core, :imports nil, :requires {s schema.core, schema.core schema.core, stc schema-tools.coerce, schema-tools.coerce schema-tools.coerce, stu schema-tools.util, schema-tools.util schema-tools.util}, :uses nil, :defs {get-in-schema {:protocol-inline nil, :meta {:file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema_tools/core.cljc", :line 20, :column 8, :end-line 20, :end-column 21, :private true, :arglists (quote ([m k & [default]])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(m k [default])], :arglists ([m k & [default]]), :arglists-meta (nil)}}, :private true, :name schema-tools.core/get-in-schema, :variadic true, :file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema_tools/core.cljc", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(m k [default])], :arglists ([m k & [default]]), :arglists-meta (nil)}, :method-params [(m k [default])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 2, :fn-var true, :arglists ([m k & [default]])}, dissoc-in {:protocol-inline nil, :meta {:file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema_tools/core.cljc", :line 140, :column 7, :end-line 140, :end-column 16, :arglists (quote ([schema [k & ks]])), :doc "Dissociates an entry from a nested associative Schema returning a new\n  nested structure. keys is a sequence of keys. Any empty maps that result\n  will not be present in the new Schema."}, :name schema-tools.core/dissoc-in, :variadic false, :file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema_tools/core.cljc", :end-column 16, :method-params ([schema p__14106]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 140, :end-line 140, :max-fixed-arity 2, :fn-var true, :arglists (quote ([schema [k & ks]])), :doc "Dissociates an entry from a nested associative Schema returning a new\n  nested structure. keys is a sequence of keys. Any empty maps that result\n  will not be present in the new Schema."}, dissoc {:protocol-inline nil, :meta {:file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema_tools/core.cljc", :line 78, :column 7, :end-line 78, :end-column 13, :arglists (quote ([schema & ks])), :doc "Dissoc[iate]s keys from Schema.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(schema ks)], :arglists ([schema & ks]), :arglists-meta (nil)}}, :name schema-tools.core/dissoc, :variadic true, :file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema_tools/core.cljc", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(schema ks)], :arglists ([schema & ks]), :arglists-meta (nil)}, :method-params [(schema ks)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 78, :end-line 78, :max-fixed-arity 1, :fn-var true, :arglists ([schema & ks]), :doc "Dissoc[iate]s keys from Schema."}, AnyKeys {:name schema-tools.core/AnyKeys, :file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema_tools/core.cljc", :line 51, :column 1, :end-line 51, :end-column 13, :meta {:file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema_tools/core.cljc", :line 51, :column 6, :end-line 51, :end-column 13}}, schema-description {:protocol-inline nil, :meta {:file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema_tools/core.cljc", :line 215, :column 7, :end-line 215, :end-column 25, :arglists (quote ([schema])), :doc "Returns the description of a schema attached via schema-with-description."}, :name schema-tools.core/schema-description, :variadic false, :file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema_tools/core.cljc", :end-column 25, :method-params ([schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 215, :end-line 215, :max-fixed-arity 1, :fn-var true, :arglists (quote ([schema])), :doc "Returns the description of a schema attached via schema-with-description."}, schema-with-description {:protocol-inline nil, :meta {:file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema_tools/core.cljc", :line 210, :column 7, :end-line 210, :end-column 30, :arglists (quote ([schema description])), :doc "Records description in schema's metadata."}, :name schema-tools.core/schema-with-description, :variadic false, :file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema_tools/core.cljc", :end-column 30, :method-params ([schema description]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 210, :end-line 210, :max-fixed-arity 2, :fn-var true, :arglists (quote ([schema description])), :doc "Records description in schema's metadata."}, transform-keys {:protocol-inline nil, :meta {:file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema_tools/core.cljc", :line 34, :column 8, :end-line 34, :end-column 22, :private true, :arglists (quote ([schema f ks]))}, :private true, :name schema-tools.core/transform-keys, :variadic false, :file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema_tools/core.cljc", :end-column 22, :method-params ([schema f ks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 34, :end-line 34, :max-fixed-arity 3, :fn-var true, :arglists (quote ([schema f ks]))}, AnyKeywordKeys {:name schema-tools.core/AnyKeywordKeys, :file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema_tools/core.cljc", :line 54, :column 1, :end-line 54, :end-column 20, :meta {:file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema_tools/core.cljc", :line 54, :column 6, :end-line 54, :end-column 20}}, required-keys {:protocol-inline nil, :meta {:file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema_tools/core.cljc", :line 205, :column 7, :end-line 205, :end-column 20, :arglists (quote ([m] [m ks])), :doc "Makes given map keys required. Defaults to all keys.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([m] [m ks]), :arglists ([m] [m ks]), :arglists-meta (nil nil)}}, :name schema-tools.core/required-keys, :variadic false, :file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema_tools/core.cljc", :end-column 20, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([m] [m ks]), :arglists ([m] [m ks]), :arglists-meta (nil nil)}, :method-params ([m] [m ks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 205, :end-line 205, :max-fixed-arity 2, :fn-var true, :arglists ([m] [m ks]), :doc "Makes given map keys required. Defaults to all keys."}, assoc-in {:protocol-inline nil, :meta {:file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema_tools/core.cljc", :line 113, :column 7, :end-line 113, :end-column 15, :arglists (quote ([schema [k & ks] v])), :doc "Associates a value in a nested associative Schema, where `ks` is a\n  sequence of keys and `v` is the new value and returns a new nested Schema.\n  If any levels do not exist, hash-maps will be created."}, :name schema-tools.core/assoc-in, :variadic false, :file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema_tools/core.cljc", :end-column 15, :method-params ([schema p__14094 v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 113, :end-line 113, :max-fixed-arity 3, :fn-var true, :arglists (quote ([schema [k & ks] v])), :doc "Associates a value in a nested associative Schema, where `ks` is a\n  sequence of keys and `v` is the new value and returns a new nested Schema.\n  If any levels do not exist, hash-maps will be created."}, key-in-schema {:protocol-inline nil, :meta {:file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema_tools/core.cljc", :line 12, :column 8, :end-line 12, :end-column 21, :private true, :arglists (quote ([m k]))}, :private true, :name schema-tools.core/key-in-schema, :variadic false, :file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema_tools/core.cljc", :end-column 21, :method-params ([m k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m k]))}, select-keys {:protocol-inline nil, :meta {:file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema_tools/core.cljc", :line 87, :column 7, :end-line 87, :end-column 18, :arglists (quote ([schema ks])), :doc "Like `clojure.core/select-keys` but handles boths optional-keys and required-keys."}, :name schema-tools.core/select-keys, :variadic false, :file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema_tools/core.cljc", :end-column 18, :method-params ([schema ks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 87, :end-line 87, :max-fixed-arity 2, :fn-var true, :arglists (quote ([schema ks])), :doc "Like `clojure.core/select-keys` but handles boths optional-keys and required-keys."}, update {:protocol-inline nil, :meta {:file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema_tools/core.cljc", :line 155, :column 7, :end-line 155, :end-column 13, :arglists (quote ([schema k f & args])), :doc "Updates a value in a map with a function.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(schema k f args)], :arglists ([schema k f & args]), :arglists-meta (nil)}}, :name schema-tools.core/update, :variadic true, :file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema_tools/core.cljc", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(schema k f args)], :arglists ([schema k f & args]), :arglists-meta (nil)}, :method-params [(schema k f args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 155, :end-line 155, :max-fixed-arity 3, :fn-var true, :arglists ([schema k f & args]), :doc "Updates a value in a map with a function."}, update-in {:protocol-inline nil, :meta {:file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema_tools/core.cljc", :line 125, :column 7, :end-line 125, :end-column 16, :arglists (quote ([schema [k & ks] f & args])), :doc "'Updates' a value in a nested associative Schema, where `ks` is a\n  sequence of keys and `f` is a function that will take the old value\n  and any supplied args and return the new value, and returns a new\n  nested Schema. If any levels do not exist, hash-maps will be\n  created.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(schema [k & ks] f args)], :arglists ([schema [k & ks] f & args]), :arglists-meta (nil)}}, :name schema-tools.core/update-in, :variadic true, :file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema_tools/core.cljc", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(schema [k & ks] f args)], :arglists ([schema [k & ks] f & args]), :arglists-meta (nil)}, :method-params [(schema [k & ks] f args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 125, :end-line 125, :max-fixed-arity 3, :fn-var true, :arglists ([schema [k & ks] f & args]), :doc "'Updates' a value in a nested associative Schema, where `ks` is a\n  sequence of keys and `f` is a function that will take the old value\n  and any supplied args and return the new value, and returns a new\n  nested Schema. If any levels do not exist, hash-maps will be\n  created."}, explicit-key {:protocol-inline nil, :meta {:file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema_tools/core.cljc", :line 7, :column 8, :end-line 7, :end-column 20, :private true, :arglists (quote ([k]))}, :private true, :name schema-tools.core/explicit-key, :variadic false, :file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema_tools/core.cljc", :end-column 20, :method-params ([k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 1, :fn-var true, :arglists (quote ([k]))}, any-keys {:protocol-inline nil, :meta {:file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema_tools/core.cljc", :line 52, :column 7, :end-line 52, :end-column 15, :arglists (quote ([]))}, :name schema-tools.core/any-keys, :variadic false, :file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema_tools/core.cljc", :end-column 15, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 52, :end-line 52, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, merge {:protocol-inline nil, :meta {:file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema_tools/core.cljc", :line 160, :column 7, :end-line 160, :end-column 12, :arglists (quote ([& schemas])), :doc "Returns a Schema that consists of the rest of the Schemas conj-ed onto\n  the first. If a schema key occurs in more than one map, the mapping from\n  the latter (left-to-right) will be the mapping in the result. Works only\n  with Map schemas.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(schemas)], :arglists ([& schemas]), :arglists-meta (nil)}}, :name schema-tools.core/merge, :variadic true, :file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema_tools/core.cljc", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(schemas)], :arglists ([& schemas]), :arglists-meta (nil)}, :method-params [(schemas)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 160, :end-line 160, :max-fixed-arity 0, :fn-var true, :arglists ([& schemas]), :doc "Returns a Schema that consists of the rest of the Schemas conj-ed onto\n  the first. If a schema key occurs in more than one map, the mapping from\n  the latter (left-to-right) will be the mapping in the result. Works only\n  with Map schemas."}, any-keyword-keys {:protocol-inline nil, :meta {:file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema_tools/core.cljc", :line 55, :column 7, :end-line 55, :end-column 23, :arglists (quote ([& schemas])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(schemas)], :arglists ([& schemas]), :arglists-meta (nil)}}, :name schema-tools.core/any-keyword-keys, :variadic true, :file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema_tools/core.cljc", :end-column 23, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(schemas)], :arglists ([& schemas]), :arglists-meta (nil)}, :method-params [(schemas)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 55, :end-line 55, :max-fixed-arity 0, :fn-var true, :arglists ([& schemas])}, maybe-anonymous {:protocol-inline nil, :meta {:file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema_tools/core.cljc", :line 23, :column 8, :end-line 23, :end-column 23, :private true, :arglists (quote ([original current]))}, :private true, :name schema-tools.core/maybe-anonymous, :variadic false, :file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema_tools/core.cljc", :end-column 23, :method-params ([original current]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 2, :fn-var true, :arglists (quote ([original current]))}, select-schema {:protocol-inline nil, :meta {:file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema_tools/core.cljc", :line 181, :column 7, :end-line 181, :end-column 20, :arglists (quote ([value schema] [value schema matcher])), :doc "Strips all disallowed keys from nested Map schemas via coercion. Takes an optional\n  coercion matcher for extra coercing the selected value(s) on a single sweep. If a value\n  can't be coerced to match the schema `ExceptionInfo` is thrown (like `schema.core/validate`).", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([value schema] [value schema matcher]), :arglists ([value schema] [value schema matcher]), :arglists-meta (nil nil)}}, :name schema-tools.core/select-schema, :variadic false, :file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema_tools/core.cljc", :end-column 20, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([value schema] [value schema matcher]), :arglists ([value schema] [value schema matcher]), :arglists-meta (nil nil)}, :method-params ([value schema] [value schema matcher]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 181, :end-line 181, :max-fixed-arity 3, :fn-var true, :arglists ([value schema] [value schema matcher]), :doc "Strips all disallowed keys from nested Map schemas via coercion. Takes an optional\n  coercion matcher for extra coercing the selected value(s) on a single sweep. If a value\n  can't be coerced to match the schema `ExceptionInfo` is thrown (like `schema.core/validate`)."}, assoc {:protocol-inline nil, :meta {:file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema_tools/core.cljc", :line 61, :column 7, :end-line 61, :end-column 12, :arglists (quote ([schema & kvs])), :doc "Assoc[iate]s key & vals into Schema.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(schema kvs)], :arglists ([schema & kvs]), :arglists-meta (nil)}}, :name schema-tools.core/assoc, :variadic true, :file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema_tools/core.cljc", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(schema kvs)], :arglists ([schema & kvs]), :arglists-meta (nil)}, :method-params [(schema kvs)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 61, :end-line 61, :max-fixed-arity 1, :fn-var true, :arglists ([schema & kvs]), :doc "Assoc[iate]s key & vals into Schema."}, optional-keys {:protocol-inline nil, :meta {:file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema_tools/core.cljc", :line 200, :column 7, :end-line 200, :end-column 20, :arglists (quote ([m] [m ks])), :doc "Makes given map keys optional. Defaults to all keys.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([m] [m ks]), :arglists ([m] [m ks]), :arglists-meta (nil nil)}}, :name schema-tools.core/optional-keys, :variadic false, :file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema_tools/core.cljc", :end-column 20, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([m] [m ks]), :arglists ([m] [m ks]), :arglists-meta (nil nil)}, :method-params ([m] [m ks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 200, :end-line 200, :max-fixed-arity 2, :fn-var true, :arglists ([m] [m ks]), :doc "Makes given map keys optional. Defaults to all keys."}, get-in {:protocol-inline nil, :meta {:file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema_tools/core.cljc", :line 95, :column 7, :end-line 95, :end-column 13, :arglists (quote ([m ks] [m ks not-found])), :doc "Returns the value in a nested associative Schema,\n  where `ks` is a sequence of keys. Returns `nil` if the key\n  is not present, or the `not-found` value if supplied.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([m ks] [m ks not-found]), :arglists ([m ks] [m ks not-found]), :arglists-meta (nil nil)}}, :name schema-tools.core/get-in, :variadic false, :file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema_tools/core.cljc", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([m ks] [m ks not-found]), :arglists ([m ks] [m ks not-found]), :arglists-meta (nil nil)}, :method-params ([m ks] [m ks not-found]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 95, :end-line 95, :max-fixed-arity 3, :fn-var true, :arglists ([m ks] [m ks not-found]), :doc "Returns the value in a nested associative Schema,\n  where `ks` is a sequence of keys. Returns `nil` if the key\n  is not present, or the `not-found` value if supplied."}, explicit-key-set {:protocol-inline nil, :meta {:file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema_tools/core.cljc", :line 9, :column 8, :end-line 9, :end-column 24, :private true, :arglists (quote ([ks]))}, :private true, :name schema-tools.core/explicit-key-set, :variadic false, :file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema_tools/core.cljc", :end-column 24, :method-params ([ks]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ks]))}}, :require-macros {s schema.core, schema.core schema.core}, :cljs.analyzer/constants {:seen #{:description every? :schema vector? :else :ns :name :value map? ks or nil? fn* not p1__14116# schemas :matcher}, :order [:else :name :ns or not ks vector? every? fn* p1__14116# map? nil? schemas :value :schema :matcher :description]}, :doc nil}