;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{}, :name schema-tools.coerce, :imports nil, :requires {s schema.core, schema.core schema.core, ss schema.spec.core, schema.spec.core schema.spec.core, su schema.utils, schema.utils schema.utils, sc schema.coerce, schema.coerce schema.coerce}, :uses nil, :defs {coerce-or-error! {:protocol-inline nil, :meta {:file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema_tools/coerce.cljc", :line 11, :column 8, :end-line 11, :end-column 24, :private true, :arglists (quote ([value schema coercer type]))}, :private true, :name schema-tools.coerce/coerce-or-error!, :variadic false, :file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema_tools/coerce.cljc", :end-column 24, :method-params ([value schema coercer type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 11, :end-line 11, :max-fixed-arity 4, :fn-var true, :arglists (quote ([value schema coercer type]))}, filter-schema-keys {:protocol-inline nil, :meta {:file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema_tools/coerce.cljc", :line 21, :column 8, :end-line 21, :end-column 26, :private true, :arglists (quote ([m schema-keys extra-keys-checker]))}, :private true, :name schema-tools.coerce/filter-schema-keys, :variadic false, :file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema_tools/coerce.cljc", :end-column 26, :method-params ([m schema-keys extra-keys-checker]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 21, :end-line 21, :max-fixed-arity 3, :fn-var true, :arglists (quote ([m schema-keys extra-keys-checker]))}, map-filter-matcher {:protocol-inline nil, :meta {:file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema_tools/coerce.cljc", :line 37, :column 7, :end-line 37, :end-column 25, :arglists (quote ([schema])), :doc "Creates a matcher which removes all illegal keys from non-record maps."}, :name schema-tools.coerce/map-filter-matcher, :variadic false, :file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema_tools/coerce.cljc", :end-column 25, :method-params ([schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 37, :max-fixed-arity 1, :fn-var true, :arglists (quote ([schema])), :doc "Creates a matcher which removes all illegal keys from non-record maps."}, or-matcher {:protocol-inline nil, :meta {:file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema_tools/coerce.cljc", :line 57, :column 7, :end-line 57, :end-column 17, :arglists (quote ([& matchers])), :doc "Creates a matcher where the first matcher matching the\n  given schema is used.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(matchers)], :arglists ([& matchers]), :arglists-meta (nil)}}, :name schema-tools.coerce/or-matcher, :variadic true, :file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema_tools/coerce.cljc", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(matchers)], :arglists ([& matchers]), :arglists-meta (nil)}, :method-params [(matchers)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 57, :end-line 57, :max-fixed-arity 0, :fn-var true, :arglists ([& matchers]), :doc "Creates a matcher where the first matcher matching the\n  given schema is used."}, forwarding-matcher {:no-doc true, :protocol-inline nil, :meta {:file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema_tools/coerce.cljc", :line 65, :column 16, :end-line 65, :end-column 34, :no-doc true, :arglists (quote ([lead-matcher & tail-matchers])), :doc "Creates a matcher where all matchers are combined with OR,\n  but if the lead-matcher matches, it creates a sub-coercer and\n  forwards the coerced value to tail-matchers.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(lead-matcher tail-matchers)], :arglists ([lead-matcher & tail-matchers]), :arglists-meta (nil)}}, :name schema-tools.coerce/forwarding-matcher, :variadic true, :file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema_tools/coerce.cljc", :end-column 34, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(lead-matcher tail-matchers)], :arglists ([lead-matcher & tail-matchers]), :arglists-meta (nil)}, :method-params [(lead-matcher tail-matchers)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 65, :end-line 65, :max-fixed-arity 1, :fn-var true, :arglists ([lead-matcher & tail-matchers]), :doc "Creates a matcher where all matchers are combined with OR,\n  but if the lead-matcher matches, it creates a sub-coercer and\n  forwards the coerced value to tail-matchers."}, coercer {:protocol-inline nil, :meta {:file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema_tools/coerce.cljc", :line 87, :column 7, :end-line 87, :end-column 14, :arglists (quote ([schema matcher] [schema matcher type])), :doc "Produce a function that simultaneously coerces and validates a value against a `schema.`\n  If a value can't be coerced to match the schema, an `ex-info` is thrown - like `schema.core/validate`,\n  but with overridable `:type`, defaulting to `:schema-tools.coerce/error.`", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([schema matcher] [schema matcher type]), :arglists ([schema matcher] [schema matcher type]), :arglists-meta (nil nil)}}, :name schema-tools.coerce/coercer, :variadic false, :file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema_tools/coerce.cljc", :end-column 14, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([schema matcher] [schema matcher type]), :arglists ([schema matcher] [schema matcher type]), :arglists-meta (nil nil)}, :method-params ([schema matcher] [schema matcher type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 87, :end-line 87, :max-fixed-arity 3, :fn-var true, :arglists ([schema matcher] [schema matcher type]), :doc "Produce a function that simultaneously coerces and validates a value against a `schema.`\n  If a value can't be coerced to match the schema, an `ex-info` is thrown - like `schema.core/validate`,\n  but with overridable `:type`, defaulting to `:schema-tools.coerce/error.`"}, coerce {:protocol-inline nil, :meta {:file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema_tools/coerce.cljc", :line 98, :column 7, :end-line 98, :end-column 13, :arglists (quote ([value schema matcher] [value schema matcher type])), :doc "Simultaneously coerces and validates a value to match the given `schema.` If a `value` can't\n  be coerced to match the `schema`, an `ex-info` is thrown - like `schema.core/validate`,\n  but with overridable `:type`, defaulting to `:schema-tools.coerce/error.`", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([value schema matcher] [value schema matcher type]), :arglists ([value schema matcher] [value schema matcher type]), :arglists-meta (nil nil)}}, :name schema-tools.coerce/coerce, :variadic false, :file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema_tools/coerce.cljc", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([value schema matcher] [value schema matcher type]), :arglists ([value schema matcher] [value schema matcher type]), :arglists-meta (nil nil)}, :method-params ([value schema matcher] [value schema matcher type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 98, :end-line 98, :max-fixed-arity 4, :fn-var true, :arglists ([value schema matcher] [value schema matcher type]), :doc "Simultaneously coerces and validates a value to match the given `schema.` If a `value` can't\n  be coerced to match the `schema`, an `ex-info` is thrown - like `schema.core/validate`,\n  but with overridable `:type`, defaulting to `:schema-tools.coerce/error.`"}}, :require-macros {s schema.core, schema.core schema.core, su schema.utils, schema.utils schema.utils}, :cljs.analyzer/constants {:seen #{:schema :value :type :schema-tools.coerce/error :error}, :order [:type :schema :value :error :schema-tools.coerce/error]}, :doc nil}