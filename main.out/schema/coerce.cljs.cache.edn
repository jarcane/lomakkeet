;; Analyzed by ClojureScript 1.7.170
{:use-macros nil, :excludes #{}, :name schema.coerce, :imports nil, :requires {schema.core schema.core, schema.spec.core schema.spec.core, s schema.core, spec schema.spec.core, str clojure.string, utils schema.utils, clojure.string clojure.string, cljs.reader cljs.reader, reader cljs.reader, schema.utils schema.utils}, :uses nil, :defs {set-matcher {:protocol-inline nil, :meta {:file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema/coerce.cljs", :line 80, :column 7, :end-line 80, :end-column 18, :arglists (quote ([schema]))}, :name schema.coerce/set-matcher, :variadic false, :file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema/coerce.cljs", :end-column 18, :method-params ([schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 80, :end-line 80, :max-fixed-arity 1, :fn-var true, :arglists (quote ([schema]))}, coercer! {:schema (schema.core/make-fn-schema output-schema13971 [input-schema13972]), :protocol-inline nil, :meta {:arglists (quote ([schema coercion-matcher])), :file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema/coerce.cljs", :line 45, :column 9, :end-line 45, :end-column 17, :schema (schema.core/make-fn-schema output-schema13971 [input-schema13972]), :doc "Inputs: [schema coercion-matcher :- CoercionMatcher]\n\n  Like `coercer`, but is guaranteed to return a value that satisfies schema (or throw).", :raw-arglists (quote ([schema coercion-matcher :- CoercionMatcher]))}, :name schema.coerce/coercer!, :variadic false, :file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema/coerce.cljs", :end-column 17, :method-params ([G__13975 G__13976]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([schema coercion-matcher :- CoercionMatcher])), :line 45, :end-line 45, :max-fixed-arity 2, :fn-var true, :arglists (quote ([schema coercion-matcher])), :doc "Inputs: [schema coercion-matcher :- CoercionMatcher]\n\n  Like `coercer`, but is guaranteed to return a value that satisfies schema (or throw)."}, safe {:protocol-inline nil, :meta {:file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema/coerce.cljs", :line 84, :column 7, :end-line 84, :end-column 11, :arglists (quote ([f])), :doc "Take a single-arg function f, and return a single-arg function that acts as identity\n   if f throws an exception, and like f otherwise.  Useful because coercers are not explicitly\n   guarded for exceptions, and failing to coerce will generally produce a more useful error\n   in this case."}, :name schema.coerce/safe, :variadic false, :file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema/coerce.cljs", :end-column 11, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 84, :end-line 84, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f])), :doc "Take a single-arg function f, and return a single-arg function that acts as identity\n   if f throws an exception, and like f otherwise.  Useful because coercers are not explicitly\n   guarded for exceptions, and failing to coerce will generally produce a more useful error\n   in this case."}, +string-coercions+ {:name schema.coerce/+string-coercions+, :file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema/coerce.cljs", :line 134, :column 1, :end-line 134, :end-column 33, :no-doc true, :meta {:file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema/coerce.cljs", :line 134, :column 15, :end-line 134, :end-column 33, :no-doc true}}, CoercionMatcher {:name schema.coerce/CoercionMatcher, :file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema/coerce.cljs", :line 20, :column 1, :end-line 20, :end-column 21, :meta {:file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema/coerce.cljs", :line 20, :column 6, :end-line 20, :end-column 21}, :doc "A function from schema to coercion function, or nil if no special coercion is needed.\n   The returned function is applied to the corresponding data before validation (or walking/\n   coercion of its sub-schemas, if applicable)"}, json-coercion-matcher {:protocol-inline nil, :meta {:file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema/coerce.cljs", :line 122, :column 7, :end-line 122, :end-column 28, :arglists (quote ([schema])), :doc "A matcher that coerces keywords and keyword eq/enums from strings, and longs and doubles\n     from numbers on the JVM (without losing precision)"}, :name schema.coerce/json-coercion-matcher, :variadic false, :file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema/coerce.cljs", :end-column 28, :method-params ([schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 122, :end-line 122, :max-fixed-arity 1, :fn-var true, :arglists (quote ([schema])), :doc "A matcher that coerces keywords and keyword eq/enums from strings, and longs and doubles\n     from numbers on the JVM (without losing precision)"}, string->boolean {:protocol-inline nil, :meta {:file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema/coerce.cljs", :line 67, :column 7, :end-line 67, :end-column 22, :arglists (quote ([s])), :doc "returns true for strings that are equal, ignoring case, to the string 'true'\n   (following java.lang.Boolean/parseBoolean semantics)"}, :name schema.coerce/string->boolean, :variadic false, :file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema/coerce.cljs", :end-column 22, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 67, :end-line 67, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "returns true for strings that are equal, ignoring case, to the string 'true'\n   (following java.lang.Boolean/parseBoolean semantics)"}, string-coercion-matcher {:protocol-inline nil, :meta {:file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema/coerce.cljs", :line 143, :column 7, :end-line 143, :end-column 30, :arglists (quote ([schema])), :doc "A matcher that coerces keywords, keyword eq/enums, s/Num and s/Int,\n     and long and doubles (JVM only) from strings."}, :name schema.coerce/string-coercion-matcher, :variadic false, :file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema/coerce.cljs", :end-column 30, :method-params ([schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 143, :end-line 143, :max-fixed-arity 1, :fn-var true, :arglists (quote ([schema])), :doc "A matcher that coerces keywords, keyword eq/enums, s/Num and s/Int,\n     and long and doubles (JVM only) from strings."}, keyword-enum-matcher {:protocol-inline nil, :meta {:file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema/coerce.cljs", :line 73, :column 7, :end-line 73, :end-column 27, :arglists (quote ([schema]))}, :name schema.coerce/keyword-enum-matcher, :variadic false, :file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema/coerce.cljs", :end-column 27, :method-params ([schema]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 73, :end-line 73, :max-fixed-arity 1, :fn-var true, :arglists (quote ([schema]))}, coercer {:schema (schema.core/make-fn-schema output-schema13952 [input-schema13953]), :protocol-inline nil, :meta {:arglists (quote ([schema coercion-matcher])), :file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema/coerce.cljs", :line 26, :column 9, :end-line 26, :end-column 16, :schema (schema.core/make-fn-schema output-schema13952 [input-schema13953]), :doc "Inputs: [schema coercion-matcher :- CoercionMatcher]\n\n  Produce a function that simultaneously coerces and validates a datum.  Returns\n   a coerced value, or a schema.utils.ErrorContainer describing the error.", :raw-arglists (quote ([schema coercion-matcher :- CoercionMatcher]))}, :name schema.coerce/coercer, :variadic false, :file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema/coerce.cljs", :end-column 16, :method-params ([G__13956 G__13957]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([schema coercion-matcher :- CoercionMatcher])), :line 26, :end-line 26, :max-fixed-arity 2, :fn-var true, :arglists (quote ([schema coercion-matcher])), :doc "Inputs: [schema coercion-matcher :- CoercionMatcher]\n\n  Produce a function that simultaneously coerces and validates a datum.  Returns\n   a coerced value, or a schema.utils.ErrorContainer describing the error."}, +json-coercions+ {:name schema.coerce/+json-coercions+, :file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema/coerce.cljs", :line 111, :column 1, :end-line 111, :end-column 31, :no-doc true, :meta {:file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema/coerce.cljs", :line 111, :column 15, :end-line 111, :end-column 31, :no-doc true}}, edn-read-string {:name schema.coerce/edn-read-string, :file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema/coerce.cljs", :line 130, :column 1, :end-line 130, :end-column 21, :meta {:file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema/coerce.cljs", :line 130, :column 6, :end-line 130, :end-column 21}, :doc "Reads one object from a string. Returns nil when string is nil or empty"}, string->keyword {:protocol-inline nil, :meta {:file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema/coerce.cljs", :line 64, :column 7, :end-line 64, :end-column 22, :arglists (quote ([s]))}, :name schema.coerce/string->keyword, :variadic false, :file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema/coerce.cljs", :end-column 22, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 64, :end-line 64, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, string->uuid {:protocol-inline nil, :meta {:file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema/coerce.cljs", :line 101, :column 6, :end-line 101, :end-column 18}, :name schema.coerce/string->uuid, :variadic false, :file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema/coerce.cljs", :end-column 18, :method-params ([p1__14009#]), :protocol-impl nil, :arglists-meta (), :column 1, :line 101, :end-line 101, :max-fixed-arity 1, :fn-var true, :arglists nil, :doc "Returns instance of UUID if input is a string.\n   Note: in CLJS, this does not guarantee a specific UUID string representation,\n         similar to #uuid reader"}, Schema {:name schema.coerce/Schema, :file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema/coerce.cljs", :line 16, :column 1, :end-line 16, :end-column 12, :meta {:file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema/coerce.cljs", :line 16, :column 6, :end-line 16, :end-column 12}, :doc "A Schema for Schemas"}, first-matcher {:schema (schema.core/make-fn-schema output-schema13991 [input-schema13992]), :protocol-inline nil, :meta {:arglists (quote ([matchers])), :file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema/coerce.cljs", :line 59, :column 9, :end-line 59, :end-column 22, :schema (schema.core/make-fn-schema output-schema13991 [input-schema13992]), :doc "Inputs: [matchers :- [CoercionMatcher]]\n  Returns: CoercionMatcher\n\n  A matcher that takes the first match from matchers.", :raw-arglists (quote ([matchers :- [CoercionMatcher]]))}, :name schema.coerce/first-matcher, :variadic false, :file "/home/juho/.boot/cache/tmp/home/juho/Source/lomakkeet/ibw/-vzt798/main.out/schema/coerce.cljs", :end-column 22, :method-params ([G__13995]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :raw-arglists (quote ([matchers :- [CoercionMatcher]])), :line 59, :end-line 59, :max-fixed-arity 1, :fn-var true, :arglists (quote ([matchers])), :doc "Inputs: [matchers :- [CoercionMatcher]]\n  Returns: CoercionMatcher\n\n  A matcher that takes the first match from matchers."}}, :require-macros {macros schema.macros, schema.macros schema.macros, s schema.core, schema.core schema.core, utils schema.utils, schema.utils schema.utils}, :cljs.analyzer/constants {:seen #{coercer! schema.core/Any :schema :schema.core/error :else CoercionMatcher schema :value :proto-sym :type matchers coercer s/Schema :error arg0 coercion-matcher :doc :proto-pred first-matcher}, :order [:proto-sym :proto-pred s/Schema arg0 schema :schema schema.core/Any coercion-matcher CoercionMatcher coercer :doc :type :value :error :schema.core/error :else coercer! matchers first-matcher]}, :doc "Extension of schema for input coercion (coercing an input to match a schema)"}